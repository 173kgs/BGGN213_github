---
title: "BGGN213 Class 5 Data Visualization"
author: "Wenxi Tang"
format: pdf
editor: visual
---

# Plotting in R

R has many plotting and visualization systems including "base" R.

```{r}
head(cars)
```

```{r}
plot(cars)
```

Base R plots can be quite simple for basic plots when compared to systems like ggplot.

To use an add on package, like ggplot, first need to get it installed in my computer.

We use the function `install.packages()` with the name of the package you want to install.

```{r}
library(ggplot2)
ggplot(cars)
```

ggplot is much more verbose than base R plot and every single ggplot needs at least 3 things:

-   **Data** (this is the data.frame with the data we want to plot)
-   **Aesthetics** or aes() for short (this is how data map to the plot)
-   **Geoms** (like geom_point(), geom_line(), specify the plot type)

```{r}
ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  theme_bw() + 
  geom_smooth(method ="lm", se = FALSE)
```




## A plot of some gene expression data

The code to read the data:

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

>Q. Find out how many genes there are in this dataset.

```{r}
nrow(genes)
```

There are `r nrow(genes)` genes in this dataset. 

>Q. How many genes are up-regulated?

```{r}
table(genes$State)
```

Another way to do it: 

```{r}
sum(genes$State == "up")
```

Let's plot it.

```{r}
ggplot(genes) +
  aes(x = Condition1, y = Condition2, color = State) +
  geom_point()
#scale_colour_manual(values = c("blue", "grey", "red"))
```

I can save any ggplot object for use later so I don't need to type it all out agin. Here I save my starting plo to `p`, if I need to add any layer I can just type `p + more layers`

```{r}
p <- ggplot(genes) +
      aes(x = Condition1, y = Condition2, color = State) +
      geom_point()
p_colored <- p + scale_colour_manual(values = c("blue", "grey", "red"))
p_colored
```
Change the axis titles for the graph

```{r}
p_titled <- p_colored + labs(title = "Gene Expression Changes Upon Drug Treatment", 
         x = "Control",
         y = "Drug treatment")
p_titled
```

## Gapminder dataset plots - A more complex ggplot example

One of the big wins with ggplot is to facet your data into sub-plots.

```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
head(gapminder)
```

>Q. How many countries are in this dataset?

```{r}
length(unique(gapminder$country))
```

There are `r length(unique(gapminder$country))` in this dataset.

>Q. How many years are spanned in this dataset?

```{r}
range(gapminder$year)
```

>Q. Which country has the smallest population?

```{r}
min(gapminder$pop)
#First where is this min value in the pop vector
index <- which.min(gapminder$pop)
#Now use the index to access the $country in the dataset
gapminder$country[index]
```

```{r}
gapminder[index, ]
```

Plot the life expectancy versus GDP

```{r}
ggplot(gapminder) +
  aes(x = gdpPercap, y = lifeExp, color = continent) +
  geom_point(alpha = 0.5)
```

```{r}
ggplot(gapminder) +
  aes(x = gdpPercap, y = lifeExp, color = continent) +
  geom_point(alpha = 0.5) +
  facet_wrap(~continent)
```
```{r}
library(dplyr)
gapminder_1957_2007 <- gapminder %>% filter (year == 1957 | year == 2007)
head(gapminder_1957_2007)
```

```{r}
ggplot(gapminder_1957_2007) +
  aes(x = gdpPercap, y = lifeExp, color = continent) +
  geom_point(alpha = 0.5) +
  facet_wrap(~year)
```


```{r}
ggplot(gapminder_1957_2007, aes(gdpPercap, lifeExp)) + geom_point()
```
