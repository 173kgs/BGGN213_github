---
title: "Class 10: Halloween Mini-Project"
author: "Wenxi Tang"
format: gfm
editor: visual
---

# 1. Imparting candy data

```{r}
#read the csv file
candy_file <- "candy-data.csv"

candy = read.csv(candy_file, row.names=1)
head(candy)
```

> Q1. How many different candy types are in this dataset?

```{r}
#types of candy is the number of rows
nrow(candy)
```

> Q2. How many fruity candy types are in the dataset?

```{r}
#use the table() to get how many 1 are under column "fruity"
table(candy$fruity)
#sum the column of "fruity" gives the fruity candy types
sum(candy$fruity)
```

38 out of 85 types of candy are in the dataset.

One of the most interesting variables in the dataset is winpercent. For a given candy this value is the percentage of people who prefer this candy over another randomly chosen candy from the dataset (what 538 term a matchup). Higher values indicate a more popular candy.

```{r}
candy["Twix", ]$winpercent
```

# 2. What is your favorate candy?

> Q3. What is your favorite candy in the dataset and what is it's winpercent value?

My favorite candy is Hershey's Kisses. Its winpercent value is 55.37545.

```{r}
candy["Hershey's Kisses", ]$winpercent
```

> Q4. What is the winpercent value for "Kit Kat"?

Kitkat winpercent: 76.7686.

```{r}
candy["Kit Kat", ]$winpercent
```

> Q5. What is the winpercent value for "Tootsie Roll Snack Bars"?

Tootsie Roll Snack Bars: 49.6535.

```{r}
candy["Tootsie Roll Snack Bars", ]$winpercent
```

```{r}
library(skimr)
skim(candy)
```

> Q6. Is there any variable/column that looks to be on a different scale to the majority of the other columns in the dataset?

Yes, the "winpercent" variable looks to be on a different scale.

> Q7. What do you think a zero and one represent for the candy\$chocolate column?

1 represents this candy type has chocolate (whatever ingredient the column name is) in it while 0 represents no chocolate in this candy type. Therefore most of variables(columns) have only 0 or 1.

> Q8. Plot a histogram of winpercent values

```{r}
hist(candy$winpercent)
```

> Q9. Is the distribution of winpercent values symmetrical?

It's not symmetrical, it's a little bit skew to the right.

> Q10. Is the center of the distribution above or below 50%?

It's below 50%.

> Q11. On average is chocolate candy higher or lower ranked than fruit candy?

```{r}
as.logical(candy$chocolate)
sum(as.logical(candy$chocolate))
```

```{r}
#mean winpercent of chocolate candy
mean(candy$winpercent[as.logical(candy$chocolate)])
#mean winpercent of fruit candy
mean(candy$winpercent[as.logical(candy$fruity)])
#t-test
t.test(candy$winpercent[as.logical(candy$chocolate)], candy$winpercent[as.logical(candy$fruity)])
```

Because the p-value is below 0.05, we consider the difference statistically significant.

# 3. Overall Candy Rankings

Let's use the base R order() function together with head() to sort the whole dataset by winpercent. Or if you have been getting into the tidyverse and the dplyr package you can use the arrange() function together with head() to do the same thing and answer the following questions:

> Q13. What are the five least liked candy types in this set?

```{r}
#order by increasing winpercent value
least <- head(candy[order(candy$winpercent),], n=5)
least
```

> Q14. What are the top 5 all time favorite candy types out of this set?

```{r}
#order by decreasing winpercent
favorite <- head(candy[order(candy$winpercent, decreasing = T),], n=5)
favorite
```

> Q15. Make a first barplot of candy ranking based on winpercent values.

```{r}
library(ggplot2)

ggplot(candy) + 
  aes(winpercent, rownames(candy)) +
  geom_col()
```

> Q16. This is quite ugly, use the reorder() function to get the bars sorted by winpercent?

```{r}
ggplot(candy) + 
  aes(winpercent, reorder(rownames(candy),winpercent)) +
  geom_col()
```

Let's setup a color vector (that signifies candy type) that we can then use for some future plots. We start by making a vector of all black values (one for each candy). Then we overwrite chocolate (for chocolate candy), brown (for candy bars) and red (for fruity candy) values.

```{r}
my_cols=rep("black", nrow(candy))
my_cols[as.logical(candy$chocolate)] = "chocolate"
my_cols[as.logical(candy$bar)] = "brown"
my_cols[as.logical(candy$fruity)] = "pink"
```

```{r}
#make a colored ggplot
ggplot(candy) + 
  aes(winpercent, reorder(rownames(candy),winpercent)) +
  geom_col(fill=my_cols) 
```

> Q17. What is the worst ranked chocolate candy?

Sixlets.

> Q18. What is the best ranked fruity candy?

Starburst.

# 4. Taking a look at pricepercent

What about value for money? What is the the best candy for the least money? One way to get at this would be to make a plot of winpercent vs the pricepercent variable. The pricepercent variable records the percentile rank of the candy's price against all the other candies in the dataset. Lower vales are less expensive and high values more expensive.

```{r}
library(ggrepel)

# How about a plot of price vs win
ggplot(candy) +
  aes(winpercent, pricepercent, label=rownames(candy)) +
  geom_point(col=my_cols) + 
  geom_text_repel(col=my_cols, size=3.3, max.overlaps = 5)
```

> Q19. Which candy type is the highest ranked in terms of winpercent for the least money - i.e. offers the most bang for your buck?

Reese's Miniatures. It appears in the graph at the most right bottom corner, which means that it has very high winpercent and low pricepercent.

> Q20. What are the top 5 most expensive candy types in the dataset and of these which is the least popular?

```{r}
#order dataset by decreasing pricepercent
expensive5 <- candy[order(candy$pricepercent, decreasing = T),]
head(expensive5, n=5)
```

The most expensive candies are shown above, the least popular one is Nik L Nip.

> Q21. Make a barplot again with geom_col() this time using pricepercent and then improve this step by step, first ordering the x-axis by value and finally making a so called "dot chat" or "lollipop" chart by swapping geom_col() for geom_point() + geom_segment().

```{r}
ggplot(candy) + 
  aes(pricepercent, reorder(rownames(candy),pricepercent)) +
  geom_col()
```

```{r}
# Make a lollipop chart of pricepercent
ggplot(candy) +
  aes(pricepercent, reorder(rownames(candy), pricepercent)) +
  geom_segment(aes(yend = reorder(rownames(candy), pricepercent), 
                   xend = 0), col="gray40") +
    geom_point()
```

# 5 Exploring the correlation structure

Now that we've explored the dataset a little, we'll see how the variables interact with one another. We'll use correlation and view the results with the corrplot package to plot a correlation matrix.

```{r}
library(corrplot)
```

```{r}
cij <- cor(candy)
corrplot(cij)
```

> Q22. Examining this plot what two variables are anti-correlated (i.e. have minus values)?

There are many pairs of variables that are anti-correlated: Chocolate & fruity Bar & Pluribus Bar & Fruity Pricepercent & fruity Winpercent & fruity ...

> Q23. Similarly, what two variables are most positively correlated?

Winpercent and chocolate are most positively correlated.

# 6. Principal Component Analysis

Let's apply PCA using the prcom() function to our candy dataset remembering to set the scale=TRUE argument.

```{r}
#PCA analysis with scaling
pca <- prcomp(candy, scale = T)
summary(pca)
#check how much each variable contribute to each PC
pca$rotation
```

```{r}
plot(pca$x[, c(1,2)])
```

```{r}
#make a colored plot
plot(pca$x[,1:2], col=my_cols, pch=16)
```

We can also use ggplot to make a nicer plot.

```{r}
# Make a new data-frame with our PCA results and candy data
my_data <- cbind(candy, pca$x[,1:3])
```

```{r}
p <- ggplot(my_data) + 
        aes(x=PC1, y=PC2, 
            size=winpercent/100,  
            text=rownames(my_data),
            label=rownames(my_data)) +
        geom_point(col=my_cols)

p
```

```{r}
library(ggrepel)

p + geom_text_repel(size=3.3, col=my_cols, max.overlaps = 7)  + 
  theme(legend.position = "none") +
  labs(title="Halloween Candy PCA Space",
       subtitle="Colored by type: chocolate bar (dark brown), chocolate other (light brown), fruity (red), other (black)",
       caption="Data from 538")
```

If you want to see more candy labels you can change the max.overlaps value to allow more overlapping labels or pass the ggplot object p to plotly like so to generate an interactive plot that you can mouse over to see labels:

```{r}
library(plotly)
```

```{r}
#| eval: false
ggplotly(p)
```

Let's finish by taking a quick look at PCA our loadings. Do these make sense to you? Notice the opposite effects of chocolate and fruity and the similar effects of chocolate and bar (i.e. we already know they are correlated).

```{r}
par(mar=c(8,4,2,2))
barplot(pca$rotation[,1], las=2, ylab="PC1 Contribution")
```

> Q24. What original variables are picked up strongly by PC1 in the positive direction? Do these make sense to you?

Fruity, hard and pluribus are picked up strongly by PC1 in positive direction. It makes sense because fruity candy are most often appear as hard and pluribus, these 3 variables are associated in reality.
